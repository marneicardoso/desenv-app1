// PACOTE VIEW
package app1.view;

import javax.swing.JOptionPane;

public class Tela {

	// Monta o Menu
	public String montarMenu() {
		
		// Opções do Menu
		String menu = "1. Cadastrar Contato"
				+ "\n2. Buscar Contato"
				+ "\n3. Editar Contato"
				+ "\n4. Excluir Contato"
				+ "\n0. Sair"
				+ "\n\n";
		
		return JOptionPane.showInputDialog(
				null,
				menu, // Mensagem
				":: AGENDA de CONTATOS ::", // Título
				-1);
	} // fecha o método montarMenu
	
	// Recebe os dados informados pelo usuário
	public String receberDados(String mensagem, String titulo, int icone) {
		
		return JOptionPane.showInputDialog(
				null,
				mensagem,
				titulo,
				icone);
	} // fecha o método receberDados
	
	// Mostra o resultado
	public void mostrarMensagem(String mensagem, String titulo, int icone) {
		
		JOptionPane.showMessageDialog(
				null,
				mensagem,
				titulo,
				icone);
	}
	
	// Mostra a tela de confirmação
	public int confirmarMensagem(String mensagem, String titulo, int icone) {
		
		return JOptionPane.showConfirmDialog(
				null,
				mensagem,
				titulo,
				JOptionPane.YES_NO_OPTION,
				icone);
	}
}



// PACOTE CONTROLLER
package app1.controller;

public class Main {

	public static void main(String[] args) {
		
		// Cria um objeto da classe Controle
		Controle controle = new Controle();
		controle.iniciarAplicativo();
	}
}



package app1.controller;

import app1.model.Agenda;
import app1.model.Contato;
import app1.view.Tela;

public class Controle {

	// Cria os objetos das classes
	Tela tela = new Tela();
	Agenda agenda = new Agenda();
	
	// Método usado para iniciar o Aplicativo
	public void iniciarAplicativo() {
		
		// Ativa o Sistema
		boolean menuPrincipal = true;
		
		while (menuPrincipal) {
			
			// Menu
			String opcaoEscolhida = this.tela.montarMenu();
			
			// Chama o método conforme a opção escohida
			switch (opcaoEscolhida) {
			
				case "0":
					//menuPrincipal = false; // modo simples
					menuPrincipal = confirmarSair();
					break;
					
				case "1":
					// Cadastrar
					cadastrar();
					break;
					
				case "2":
					// Buscar
					buscar();
					break;
					
				case "3":
					// Editar
					editar();
					break;
					
				case "4":
					// Escluir
					excluir();
					break;
					
				default:
					this.tela.mostrarMensagem("Escolha uma das opções do menu", "Atenção", 2);
			}
		}
	} // fecha o método iniciarAplicativo
	
	private void cadastrar() {
		String titulo	= "Cadastro de Contato";
		String nome		= this.tela.receberDados("Informe o nome", titulo, 1);
		String idade	= this.tela.receberDados("Informe a idade", titulo, 1);
		String salario	= this.tela.receberDados("Informe o salário", titulo, 1);
		
		// Converte os valores numéricos
		try {
			int _idade		= Integer.parseInt(idade);
			double _salario	= Double.parseDouble(salario);
			
			// Cria um objeto da classe Contato
			Contato contato = new Contato(nome, _idade, _salario);
			
			// Envia os dados para serem cadastrados no Sistema
			String mensagem = this.agenda.cadastrarContatoService(contato);
			
			// Mostra o resultado
			this.tela.mostrarMensagem(mensagem, "Cadastro", 2);
			
		} catch (Exception e) {
			this.tela.mostrarMensagem("Informe apenas números", "Atenção", 2);
		}
	} // fecha o método cadastrar
	
	private void buscar() {
		String resultadoDaBusca = this.agenda.buscarContatoService();
		this.tela.mostrarMensagem(resultadoDaBusca, "Contatos", 1);
	} // fecha o método buscar
	
	private void editar() {
		buscar();
		
		String id = this.tela.receberDados("Informe o ID para editar", "Editar", 1);
		String novoNome = this.tela.receberDados("Informe o novo nome", "Editar", 1);
		String novaIdade = this.tela.receberDados("Informe a nova idade", "Editar", 1);
		String novoSalario = this.tela.receberDados("Informe o novo salário", "Editar", 1);
		
		// Converte os valores numéricos
		try {
			int _id				= Integer.parseInt(id);
			int _novaIdade		= Integer.parseInt(novaIdade);
			double _novoSalario	= Double.parseDouble(novoSalario);
			
			// Cria um objeto da classe Contato
			Contato contato = new Contato(novoNome, _novaIdade, _novoSalario);
			
			// Envia os dados para serem atualizados no Sistema
			String mensagem = this.agenda.editarContatoService(contato, _id);
			
			// Mostra o resultado
			this.tela.mostrarMensagem(mensagem, "Editar", 3);
			
		} catch(Exception e) {
			this.tela.mostrarMensagem("Informe apenas números", "Atenção", 2);
		}
		
	} // fecha o método editar
	
	private void excluir() {
		buscar();
		String id = this.tela.receberDados("Informe o ID para excluir", "Excluir", 1);
		
		try {
			int _id = Integer.parseInt(id);
			
			// Envia os dados para serem atualizados no Sistema
			String mensagem = this.agenda.excluirContatoService(_id);
			
			// Mostra o resultado
			this.tela.mostrarMensagem(mensagem, "Excluir", 3);
			
		} catch (Exception e) {
			this.tela.mostrarMensagem("Informe apenas números", "Atenção", 2);
		}
		
	} // fecha o método excluir
	
	// Confirmar Sair do Sistema
	private Boolean confirmarSair() {
		
		int sair = this.tela.confirmarMensagem("Tem certeza?", "Encerrar Sistema", 3);
		
		//System.out.println("Retorno do YES NO: " + sair);
		
		if (sair == 0) {
			this.tela.mostrarMensagem("Encerrando o Sistema...", "Encerrando", 1);
			return false;
		}
		
		return true;
		
		/*
		// IF Ternário (O mesmo teste que foi usado acima com o IF)
		
		// Quem recebe;	Condição; SE 	  : SENÃO
		boolean menu = 	sair == 0 ? false : true;
		
		return menu;
		*/
	} // fecha o método confirmarSair
}



// PACOTE MODEL
package app1.model;

public class Contato {

	// Atributos
	private String nome;
	private int idade;
	private double salario;

	// Construtor
	public Contato(String _nome, int _idade, double _salario) {
		this.nome = _nome;
		this.idade = _idade;
		this.salario = _salario;
	}

	// Get e Set
	public String getNome() {
		return this.nome;
	}

	public void setNome(String _nome) {
		this.nome = _nome;
	}

	public int getIdade() {
		return this.idade;
	}

	public void setIdade(int _idade) {
		this.idade = _idade;
	}

	public double getSalario() {
		return this.salario;
	}

	public void setSalario(double _salario) {
		this.salario = _salario;
	}
}



package app1.model;

import java.util.ArrayList;
import java.util.List;

public class Agenda {

	// Cria a lista de Contatos (Agenda) [GLOBAL]
	List<Contato> listaContato = new ArrayList<>();
	
	public String cadastrarContatoService(Contato contato) {
		
		// Verifica se os campos estão preenchidos
		if (contato.getNome().equals("")) {
			return "O campo Nome é obrigatório";
		}
		
		// Adiciona o Contato na Agenda
		listaContato.add(contato);
		
		return "Cadastro efetuado com sucesso!";
		
	} // fecha o método cadastrarContatoService
	
	public String buscarContatoService() {
		
		// Guarda os valores buscados
		String resultado = "";
		
		// Guarda o tamanho da lista (quantidade de registros) 
		int tamanhoLista = listaContato.size();
		
		// Verifica se há registro na lista
		if (tamanhoLista > 0) {
			
			// Percorre a lista
			for (int i = 0; i < tamanhoLista; i++) {
				String contato = "ID: " + (i + 1) +
						"\nNome: " + listaContato.get(i).getNome() +
						"\nIdade: " + listaContato.get(i).getIdade() +
						"\nSalário: " + listaContato.get(i).getSalario() +
						"\n\n-----\n";
				
				// Concatena com o resultado (se houver mais de 1)
				resultado += contato;
				//resultado = resultado + contato; (o mesmo que a linha acima)
			}
		
		} else {
			return "Nenhum resultado encontrado.";
		}
		
		return resultado;
		
	} // fecha o método buscarContatoService
	
	public String editarContatoService(Contato contato, int id) {
		
		// Atualiza a lista (ArrayList)
		listaContato.get(id -1).setNome(contato.getNome());
		listaContato.get(id -1).setIdade(contato.getIdade());
		listaContato.get(id -1).setSalario(contato.getSalario());
		
		return "Cadastro editado com sucesso";
	}
	
	public String excluirContatoService(int id) {
		listaContato.remove(id -1);
		
		return "Cadastro excluído com sucesso";
	}
}

